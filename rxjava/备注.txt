RxJava详解    https://www.jianshu.com/p/a93c79e9f689    https://www.cnblogs.com/smartbetter/p/7723773.html

1、观察者与被观察者
不支持背压：Observable ( 被观察者 ) / Observer ( 观察者 )
支持背压：Flowable （被观察者）/ Subscriber （观察者）

2、Observable
RxJava 三部曲
第一步：初始化 Observable
第二步：初始化 Observer
第三步：建立订阅关系
例子：
Observable.create(new ObservableOnSubscribe<Integer>() { // 第一步：初始化Observable
            @Override
            public void subscribe(@NonNull ObservableEmitter<Integer> e) throws Exception {
                Log.e(TAG, "Observable emit 1" + "\n");
                e.onNext(1);
                Log.e(TAG, "Observable emit 2" + "\n");
                e.onNext(2);
                Log.e(TAG, "Observable emit 3" + "\n");
                e.onNext(3);
                e.onComplete();
                Log.e(TAG, "Observable emit 4" + "\n" );
                e.onNext(4);
            }
        }).subscribe(new Observer<Integer>() { // 第三步：订阅

            // 第二步：初始化Observer
            private int I;
            private Disposable mDisposable;

            @Override
            public void onSubscribe(@NonNull Disposable d) {
                mDisposable = d;
            }

            @Override
            public void onNext(@NonNull Integer integer) {
                I++;
                if (i == 2) {
                    // 在RxJava 2.x 中，新增的Disposable可以做到切断的操作，让Observer观察者不再接收上游事件
                    mDisposable.dispose();
                }
            }

            @Override
            public void onError(@NonNull Throwable e) {
                Log.e(TAG, "onError : value : " + e.getMessage() + "\n" );
            }

            @Override
            public void onComplete() {
                Log.e(TAG, "onComplete" + "\n" );
            }
        });


3、简化订阅
  当然，我们的 RxJava 2.x 也为我们保留了简化订阅方法，我们可以根据需求，进行相应的简化订阅，只不过传入对象改为了 Consumer。
  Consumer 即消费者，用于接收单个值，
  BiConsumer 则是接收两个值，
  Function 用于变换对象，
  Predicate 用于判断。
  这些接口命名大多参照了 Java 8。

  作者：Rtia
  链接：https://www.jianshu.com/p/061f23ecc19a
  来源：简书
  简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。


4、线程调度
 subscribeOn：subscribeOn 用于指定 subscribe() 时所发生的线程，就是发射事件的线程。多次指定发射事件的线程只有第一次指定的有效，也就是说多次调用 subscribeOn() 只有第一次的有效，其余的会被忽略。
 observeOn：observeOn 方法用于指定下游 Observer 回调发生的线程，就是订阅者接收事件的线程。但多次指定订阅者接收线程是可以的，也就是说每调用一次 observerOn()，下游的线程就会切换一次。


5、内置线程
    Schedulers.io() 代表io操作的线程, 通常用于网络,读写文件等io密集型的操作；
    Schedulers.computation() 代表CPU计算密集型的操作, 例如需要大量计算的操作；
    Schedulers.newThread() 代表一个常规的新线程；
    AndroidSchedulers.mainThread() 代表Android的主线程

6、操作符
   （1）map 操作符可以将一个 Observable 对象通过某种关系转换为另一个Observable 对象。
   例子：
   1）通过 Observable.create() 方法，调用 OkHttp 网络请求；
   2）通过 map 操作符集合 gson，将 Response 转换为 bean 类；
   3）通过 doOnNext() 方法，解析 bean 中的数据，并进行数据库存储等操作；
   4）调度线程，在子线程中进行耗时操作任务，在主线程中更新 UI ；
   5）通过 subscribe()，根据请求成功或者失败来更新 UI 。
   Observable
           .create(new ObservableOnSubscribe<Response>() {
               @Override
               public void subscribe(@NonNull ObservableEmitter<Response> e) throws Exception {
                   Builder builder = new Builder()
                           .url("http://api.avatardata.cn/MobilePlace/LookUp?key=ec47b85086be4dc8b5d941f5abd37a4e&mobileNumber=13021671512")
                           .get();
                   Request request = builder.build();
                   Call call = new OkHttpClient().newCall(request);
                   Response response = call.execute();
                   e.onNext(response);
               }
           })
           .map(new Function<Response, MobileAddress>() {
               @Override
               public MobileAddress apply(@NonNull Response response) throws Exception {
                   if (response.isSuccessful()) {
                       ResponseBody body = response.body();
                       if (body != null) {
                           Log.e(TAG, "map:转换前:" + response.body());
                           return new Gson().fromJson(body.string(), MobileAddress.class);
                       }
                   }
                   return null;
               }
           })
           .observeOn(AndroidSchedulers.mainThread())
           .doOnNext(new Consumer<MobileAddress>() {
               @Override
               public void accept(@NonNull MobileAddress s) throws Exception {
                   Log.e(TAG, "doOnNext: 保存成功：" + s.toString() + "\n");
               }
           })
           .subscribeOn(Schedulers.io())
           .observeOn(AndroidSchedulers.mainThread())
           .subscribe(new Consumer<MobileAddress>() {
               @Override
               public void accept(@NonNull MobileAddress data) throws Exception {
                   Log.e(TAG, "成功:" + data.toString() + "\n");
               },new Consumer<Throwable>()

               {
                   @Override
                   public void accept (@NonNull Throwable throwable) throws Exception {
                   Log.e(TAG, "失败：" + throwable.getMessage() + "\n");
               }
               });

   （2）concat，可以做到不交错的发射两个甚至多个 Observable 的发射事件，并且只有前一个 Observable 终止(onComplete) 后才会订阅下一个 Observable。
   例子：
   利用 concat 的必须调用 onComplete 后才能订阅下一个 Observable 的特性，我们就可以先读取缓存数据，倘若获取到的缓存数据不是我们想要的，再调用 onComplete() 以执行获取网络数据的 Observable，如果缓存数据能应我们所需，则直接调用 onNext()，防止过度的网络请求，浪费用户的流量。
    Observable<FoodList> cache =
            Observable.create(new ObservableOnSubscribe<FoodList>() {
                        @Override
                        public void subscribe(@NonNull ObservableEmitter<FoodList> e) throws Exception {
                            Log.e(TAG, "create当前线程:" + Thread.currentThread().getName());
                            FoodList data = CacheManager.getInstance().getFoodListData();

                            // 在操作符 concat 中，只有调用 onComplete 之后才会执行下一个 Observable
                            if (data != null) { // 如果缓存数据不为空，则直接读取缓存数据，而不读取网络数据
                                isFromNet = false;
                                Log.e(TAG, "\nsubscribe: 读取缓存数据:");
                                runOnUiThread(new Runnable() {
                                    @Override
                                    public void run() {
                                        mRxOperatorsText.append("\nsubscribe: 读取缓存数据:\n");
                                    }
                                });

                                e.onNext(data);
                            } else {
                                isFromNet = true;
                                runOnUiThread(new Runnable() {
                                    @Override
                                    public void run() {
                                        mRxOperatorsText.append("\nsubscribe: 读取网络数据:\n");
                                    }
                                });
                                Log.e(TAG, "\nsubscribe: 读取网络数据:");
                                e.onComplete();
                            }

                        }
                    });

    Observable<FoodList> network =
            Rx2AndroidNetworking
                    .get("http://www.tngou.net/api/food/list")
                    .addQueryParameter("rows", 10 + "")
                    .build()
                    .getObjectObservable(FoodList.class);

    // 两个 Observable 的泛型应当保持一致
    Observable
            .concat(cache, network)
            .subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe(new Consumer<FoodList>() {
                @Override
                public void accept(@NonNull FoodList tngouBeen) throws Exception {
                    Log.e(TAG, "subscribe 成功:" + Thread.currentThread().getName());
                    if (isFromNet) {
                        mRxOperatorsText.append("accept : 网络获取数据设置缓存: \n");
                        Log.e(TAG, "accept : 网络获取数据设置缓存: \n" + tngouBeen.toString());
                        CacheManager.getInstance().setFoodListData(tngouBeen);
                    }

                    mRxOperatorsText.append("accept: 读取数据成功:" + tngouBeen.toString() + "\n");
                    Log.e(TAG, "accept: 读取数据成功:" + tngouBeen.toString());
                }
            }, new Consumer<Throwable>() {
                @Override
                public void accept(@NonNull Throwable throwable) throws Exception {
                    Log.e(TAG, "subscribe 失败:" + Thread.currentThread().getName());
                    Log.e(TAG, "accept: 读取数据失败：" + throwable.getMessage());
                    mRxOperatorsText.append("accept: 读取数据失败：" + throwable.getMessage() + "\n");
                }
            });

    （3） flatMap：多个网络请求依次依赖
    例子：
    我们的 flatMap 恰好解决了这种应用场景，flatMap 操作符可以将一个发射数据的 Observable 变换为多个 Observables ，然后将它们发射的数据合并后放到一个单独的 Observable，利用这个特性，我们很轻松地达到了我们的需求。
    Rx2AndroidNetworking.get("http://www.tngou.net/api/food/list")
                    .addQueryParameter("rows", 1 + "")
                    .build()
                    .getObjectObservable(FoodList.class) // 发起获取食品列表的请求，并解析到FootList
                    .subscribeOn(Schedulers.io())        // 在io线程进行网络请求
                    .observeOn(AndroidSchedulers.mainThread()) // 在主线程处理获取食品列表的请求结果
                    .doOnNext(new Consumer<FoodList>() {
                        @Override
                        public void accept(@NonNull FoodList foodList) throws Exception {
                            // 先根据获取食品列表的响应结果做一些操作
                            Log.e(TAG, "accept: doOnNext :" + foodList.toString());
                            mRxOperatorsText.append("accept: doOnNext :" + foodList.toString()+"\n");
                        }
                    })
                    .observeOn(Schedulers.io()) // 回到 io 线程去处理获取食品详情的请求
                    .flatMap(new Function<FoodList, ObservableSource<FoodDetail>>() {
                        @Override
                        public ObservableSource<FoodDetail> apply(@NonNull FoodList foodList) throws Exception {
                            if (foodList != null && foodList.getTngou() != null && foodList.getTngou().size() > 0) {
                                return Rx2AndroidNetworking.post("http://www.tngou.net/api/food/show")
                                        .addBodyParameter("id", foodList.getTngou().get(0).getId() + "")
                                        .build()
                                        .getObjectObservable(FoodDetail.class);
                            }
                            return null;

                        }
                    })
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(new Consumer<FoodDetail>() {
                        @Override
                        public void accept(@NonNull FoodDetail foodDetail) throws Exception {
                            Log.e(TAG, "accept: success ：" + foodDetail.toString());
                            mRxOperatorsText.append("accept: success ：" + foodDetail.toString()+"\n");
                        }
                    }, new Consumer<Throwable>() {
                        @Override
                        public void accept(@NonNull Throwable throwable) throws Exception {
                            Log.e(TAG, "accept: error :" + throwable.getMessage());
                            mRxOperatorsText.append("accept: error :" + throwable.getMessage()+"\n");
                        }
                    });

    （4）zip 多个接口数据共同更新 UI
    在实际应用中，我们极有可能会在一个页面显示的数据来源于多个接口，这时候我们的 zip 操作符为我们排忧解难。
    zip 操作符可以将多个 Observable 的数据结合为一个数据源再发射出去。
    Observable<MobileAddress> observable1 =
            Rx2AndroidNetworking.get("http://api.avatardata.cn/MobilePlace/LookUp?key=ec47b85086be4dc8b5d941f5abd37a4e&mobileNumber=13021671512")
                    .build()
                    .getObjectObservable(MobileAddress.class);

    Observable<CategoryResult> observable2 =
            Network.getGankApi()
                    .getCategoryData("Android", 1, 1);

    Observable
            .zip(observable1, observable2, new BiFunction<MobileAddress, CategoryResult, String>() {
                @Override
                public String apply(@NonNull MobileAddress mobileAddress, @NonNull CategoryResult categoryResult) throws Exception {
                    return "合并后的数据为：手机归属地：" + mobileAddress.getResult().getMobilearea() + "人名：" + categoryResult.results.get(0).who;
                }
            })
            .subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe(new Consumer<String>() {
                @Override
                public void accept(@NonNull String s) throws Exception {
                    Log.e(TAG, "accept: 成功：" + s + "\n");
                }
            }, new Consumer<Throwable>() {
                @Override
                public void accept(@NonNull Throwable throwable) throws Exception {
                    Log.e(TAG, "accept: 失败：" + throwable + "\n");
                }
            });

    （5）interval 心跳间隔任务。设置时间间隔
    例子：
    private Disposable mDisposable;

    @Override
    protected void doSomething() {
        mDisposable =
                Flowable
                        .interval(1, TimeUnit.SECONDS)
                        .doOnNext(new Consumer<Long>() {
                            @Override
                            public void accept(@NonNull Long aLong) throws Exception {
                                Log.e(TAG, "accept: doOnNext : " + aLong);
                            }
                        })
                        .observeOn(AndroidSchedulers.mainThread())
                        .subscribe(new Consumer<Long>() {
                            @Override
                            public void accept(@NonNull Long aLong) throws Exception {
                                Log.e(TAG, "accept: 设置文本 ：" + aLong);
                                mRxOperatorsText.append("accept: 设置文本 ：" + aLong + "\n");
                            }
                        });
    }

    /**
     * 销毁时停止心跳
     */
    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (mDisposable != null) {
            mDisposable.dispose();
        }
    }